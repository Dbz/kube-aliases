#!/bin/bash

# Check if port is available

np_default_min=30000
np_default_max=32767

function usage {
  echo "Check for NodePort collisions, generate NodePorts, check if specified port is available"
  echo ""
  echo "Usage: knport [cg] port"
  echo "NodePorts can be ${np_default_min}-${np_default_max}".
  echo "Search to see if port exists."
  echo "  -a                   Show all NodePorts"
  echo "  -c                   check for NodePort collisions"
  echo "  -g                   generate available port number"
}


function contains_element {
  local e set="${1}"
  shift
  for e; do [[ "${e}" == "${set}" ]] && return 0; done
  return 1
}


# Check if nodeport is available
function available_port {
  read_nodeports
  contains_element "${1}" "${nodeports[@]}"
  if [[ $? == 0 ]]; then
    echo "Is contained in"
  else
    echo "Is not contained in"
  fi
  exit 0
}


# read nodeports into an array
function read_nodeports {
  # Read in nodeports
  read -ra nodeports \
    <<< "$(kubectl get svc --all-namespaces \
    -o go-template='{{range .items}}{{range.spec.ports}}{{if .nodePort}}{{.nodePort}}{{" "}}{{end}}{{end}}{{end}}')"
}


function mkport {
  read_nodeports

  # Iterate through and give first available port
  for i in $(seq $np_default_min $np_default_max); do
    contains_element "${i}" "${nodeports[@]}"
    if [[ $? == 1 ]]; then
      echo "${i}"
      exit 0
    fi
  done

  echo "All ports are used."
  exit 1
}


# TODO pretty print
function find_collisions {
  read_nodeports
  printf '%s\n' "${nodeports[@]}"|awk '!($0 in seen){seen[$0];next} 1'
  exit 0
}


nodeports=()
check_collisions=""
generate_port=""
show_all=""
while getopts "acg?h" opt; do
  case $opt in
    a)
      show_all="true"
      ;;
    c)
      check_collisions="true"
      ;;
    g)
      generate_port="true"
      ;;
    h|\?)
      # echo "Invalid option: -$OPTARG" >&2
      usage
      exit 0
      ;;
  esac
done


if [ -n "${show_all}" ]; then
  output=$(kubectl get --all-namespaces services \
    | kfind.awk -v regex="NodePort" -v resourcetype="services")
  echo "${output}"
  exit 0
elif [ -n "${check_collisions}" ]; then
  find_collisions
elif [ -n "${generate_port}" ]; then
  mkport
else
  available_port "${1}"
fi
